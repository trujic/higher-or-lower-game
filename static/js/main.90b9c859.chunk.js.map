{"version":3,"sources":["images/1.png","images/2.png","images/3.png","images/4.png","images/5.png","images/6.png","images/7.png","images/8.png","images/9.png","images/10.png","images/12.png","images/13.png","images/14.png","components/GameButtons.js","components/GameTitle.js","components/FirstCard.js","components/NextCard.js","components/PreviousCard.js","components/Coins.js","components/Bet.js","components/Answer.js","components/NewGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameButtons","props","className","onClick","checkHigher","checkLower","GameTitle","startGame","FirstCard","src","currentCard","image","alt","NextCard","PreviousCard","cards","previousCard","map","card","key","value","Coins","coins","Bet","type","placeholder","bet","onChange","handleBet","Answer","answer","NewGame","newGame","App","useState","imageOne","imageTwo","imageThree","imageFour","imageFive","imageSix","imageSeven","imageEight","imageNine","imageTen","imageTwelve","imageThirteen","imageFourteen","start","setStart","setCurrentCard","setPreviousCard","nextCard","setCoins","setBet","setAnswer","setCard","randomCard","Math","floor","random","length","filter","gameUpdate","newArray","push","Number","resetCards","newGameCard","restartGame","setTimeout","alert","next","console","log","e","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90b9c859.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.ee071552.png\";","module.exports = __webpack_public_path__ + \"static/media/2.ec7719ba.png\";","module.exports = __webpack_public_path__ + \"static/media/3.4294570c.png\";","module.exports = __webpack_public_path__ + \"static/media/4.497d5e69.png\";","module.exports = __webpack_public_path__ + \"static/media/5.5949deb9.png\";","module.exports = __webpack_public_path__ + \"static/media/6.93dc24a8.png\";","module.exports = __webpack_public_path__ + \"static/media/7.c2e94427.png\";","module.exports = __webpack_public_path__ + \"static/media/8.02a84863.png\";","module.exports = __webpack_public_path__ + \"static/media/9.373336fb.png\";","module.exports = __webpack_public_path__ + \"static/media/10.77c92e5b.png\";","module.exports = __webpack_public_path__ + \"static/media/12.c1b9358c.png\";","module.exports = __webpack_public_path__ + \"static/media/13.0672fc9b.png\";","module.exports = __webpack_public_path__ + \"static/media/14.ce44154d.png\";","import React from 'react'\r\n\r\nfunction GameButtons(props) {\r\n  return (\r\n    <div className=\"higher-lower\">\r\n      <button className=\"game-buttons\" onClick={() => props.checkHigher()}>Higher</button>\r\n      <button className=\"game-buttons\" onClick={() => props.checkLower()}>Lower</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameButtons\r\n","import React from 'react'\r\n\r\nfunction GameTitle(props) {\r\n  return(\r\n    <div className=\"start-screen\">\r\n      <h1>Higher or Lower</h1>\r\n      <button onClick={() => props.startGame()}>Start</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameTitle\r\n","import React from 'react'\r\n\r\nfunction FirstCard(props) {\r\n  return(\r\n    <div className=\"first-card\">\r\n      <h1>Current card</h1>\r\n      <img className=\"image\"src={props.currentCard.image} alt={props.currentCard.image}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FirstCard\r\n","import React from 'react'\r\n\r\nfunction NextCard() {\r\n  return(\r\n    <div className=\"first-card\">\r\n      <h1>Next card</h1>\r\n      <img className=\"image\" src=\"https://i.pinimg.com/originals/ee/b0/d7/eeb0d7bbedb3f565f2f8f71f51f1e6e7.png\" alt=\"card-backgroud\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NextCard\r\n","import React from 'react'\r\n\r\nfunction PreviousCard(props) {\r\n  if (props.cards !== [])\r\n  return(\r\n    <div className=\"previously-guessed\">\r\n        <h1>Previously guessed</h1>\r\n        {props.previousCard.map(card => {\r\n          return(\r\n            <div key={card.value} className=\"previous-card\">\r\n              <img  className=\"image\" src={card.image} alt={card.image}/>\r\n            </div>\r\n          )\r\n        })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PreviousCard\r\n","import React from 'react'\r\n\r\nfunction Coins(props) {\r\n  return(\r\n    <div className=\"coins\">\r\n      <h1>Coins: </h1>\r\n      <h1>{props.coins}</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Coins\r\n","import React from 'react'\r\n\r\nfunction Bet(props) {\r\n  return (\r\n    <div className=\"bet\">\r\n      <h1>Place a bet</h1>\r\n      <label>\r\n        <input type=\"number\" placeholder=\"Add bet...\" value={props.bet} onChange={props.handleBet}/>\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bet\r\n","import React from 'react'\r\n\r\nfunction Answer(props) {\r\n  if (props.answer === true) {\r\n    return(\r\n      <h1 className=\"answer\">You were correct!</h1>\r\n    )\r\n  } else if (props.answer === false) {\r\n    return (\r\n      <h1 className=\"answer\">You were wrong! Better luck next time</h1>\r\n    )\r\n  } else {\r\n    return(\r\n      <div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Answer\r\n","import React from 'react'\r\n\r\nfunction NewGame(props) {\r\n  return (\r\n    <div className=\"new-game\">\r\n      <button className=\"game-buttons\" onClick={props.newGame}>New Game</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewGame\r\n","import React, {useState} from 'react';\nimport imageOne from './images/1.png'\nimport imageTwo from './images/2.png'\nimport imageThree from './images/3.png'\nimport imageFour from './images/4.png'\nimport imageFive from './images/5.png'\nimport imageSix from './images/6.png'\nimport imageSeven from './images/7.png'\nimport imageEight from './images/8.png'\nimport imageNine from './images/9.png'\nimport imageTen from './images/10.png'\nimport imageTwelve from './images/12.png'\nimport imageThirteen from './images/13.png'\nimport imageFourteen from './images/14.png'\nimport GameButtons from './components/GameButtons'\nimport GameTitle from './components/GameTitle'\nimport FirstCard from './components/FirstCard'\nimport NextCard from './components/NextCard'\nimport PreviousCard from './components/PreviousCard'\nimport Coins from './components/Coins'\nimport Bet from './components/Bet'\nimport Answer from './components/Answer'\nimport NewGame from './components/NewGame'\n\nfunction App() {\n  const [cards, setCards] = useState([{\n    image: imageOne,\n    value: 1\n  },\n  {\n    image: imageTwo,\n    value: 2\n  },\n  {\n    image:imageThree,\n    value: 3\n  },\n  {\n    image: imageFour,\n    value: 4\n  },\n  {\n    image:imageFive,\n    value: 5\n  },\n  {\n    image:imageSix,\n    value: 6\n  },\n  {\n    image:imageSeven,\n    value: 7\n  },\n  {\n    image:imageEight,\n    value: 8\n  },\n  {\n    image:imageNine,\n    value: 9\n  },\n  {\n    image:imageTen,\n    value: 10\n  },\n  {\n    image:imageTwelve,\n    value: 12\n  },\n  {\n    image:imageThirteen,\n    value: 13\n  },\n  {\n    image: imageFourteen,\n    value: 14\n  }\n])\n\n  const [start, setStart] = useState(false)\n  const [currentCard, setCurrentCard] = useState([])\n  const [previousCard, setPreviousCard] = useState([])\n  const [nextCard, setNextCard] = useState({})\n  const [coins, setCoins] = useState(100)\n  const [bet, setBet] = useState(10)\n  const [answer, setAnswer] = useState()\n  const [card, setCard] = useState([...cards])\n\n  let randomCard = card[Math.floor(Math.random() * card.length)]\n\n  const startGame = () => {\n    setStart(true)\n    setCurrentCard(randomCard)\n    setCard(card.filter(card => randomCard.value !== card.value))\n  }\n\n  const gameUpdate = () => {\n    let newArray = [...previousCard]\n    newArray.push(currentCard)\n    setPreviousCard(newArray)\n    setAnswer(true)\n    setCoins(coins + Number(bet))\n  }\n\n  const resetCards = () => {\n    setCard(cards)\n    let newGameCard = card[Math.floor(Math.random() * card.length)]\n    setCard(card.filter(card => newGameCard.value !== card.value))\n    setCurrentCard(newGameCard)\n    setPreviousCard([])\n  }\n\n  const newGame = () => {\n    resetCards();\n    setCard(cards)\n    setCoins(100)\n  }\n\n  const restartGame = () => {\n    let newArray = [...previousCard]\n    newArray.push(currentCard)\n    setPreviousCard(newArray)\n    setAnswer(false)\n    setTimeout(() => {\n      resetCards();\n      setCard(cards)\n      setCoins(coins - Number(bet))\n      setAnswer(null)\n    }, 2000)\n  }\n\n  const checkHigher = () => {\n    if (bet > coins) alert(\"You dont have enough coins\")\n    else if(bet < 10 || bet === '') {\n      alert(\"Bet must be atleast 10 coins!\")\n    } else  {\n      let next = card[Math.floor(Math.random() * card.length)]\n      setCurrentCard(next)\n      setCard(card.filter(card => next.value !== card.value))\n      if (next.value > currentCard.value) {\n        console.log(next.value)\n        console.log(currentCard.value)\n        gameUpdate();\n      } else {\n        restartGame();\n      }\n    }\n  }\n\n  const checkLower = () => {\n    if (bet > coins) alert(\"You dont have enough coins\")\n    else if (bet < 10 || bet === '') alert(\"Bet must be atleast 10 coins!\")\n    else {\n      let next = card[Math.floor(Math.random() * card.length)]\n      setCurrentCard(next)\n      setCard(card.filter(card => next.value !== card.value))\n      if (next.value < currentCard.value) {\n        gameUpdate();\n      } else {\n        restartGame();\n      }\n    }\n  }\n\n  const handleBet = (e) => {\n   setBet(e.target.value);\n }\n\n  const gameScreens = () => {\n    if (start === false) {\n      return(\n        <GameTitle startGame={startGame}/>\n      )\n    }  else if (card.length > 1) {\n      return(\n        <div className=\"game-screen\">\n            {previousCard ? <PreviousCard previousCard={previousCard}/> : <div className=\"empty-div\"> </div>}\n          <div className=\"playing-cards\">\n            <FirstCard currentCard={currentCard} />\n            <NewGame newGame={newGame}/>\n            <NextCard nextCard={nextCard} />\n          </div>\n            <GameButtons checkHigher={checkHigher} checkLower={checkLower}/>\n            <Coins coins={coins}/>\n            <Bet bet={bet} handleBet={handleBet}/>\n            <Answer answer={answer}/>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <h1 className=\"win-screen\">Congratulations! All your guesses were right!</h1>\n          <NewGame newGame={newGame} resetCards={resetCards}/>\n        </div>\n      )\n    }\n  }\n  return(\n    gameScreens()\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}